options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _VERSION: "v1"       # version tag

steps:
steps:
# Step 1: Push Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: Push-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(cut -d= -f2 /workspace/deploy_env.txt | head -n1)
      IMAGE="us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"
      echo "Pushing Docker image: $IMAGE"
      docker push $IMAGE

# Step 2: Create startup.sh dynamically
- name: 'gcr.io/cloud-builders/gcloud'
  id: Create-startup
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(cut -d= -f2 /workspace/deploy_env.txt | head -n1)
      cat > startup.sh <<'EOF'
#!/bin/bash
set -e
DEPLOY_ENV='${DEPLOY_ENV}'
VERSION='${_VERSION}'
BUILD_ID='${BUILD_ID}'
IMAGE="us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${DEPLOY_ENV}-${VERSION}-${BUILD_ID}"

# Stop any running container
docker ps -q --filter "ancestor=$IMAGE" | xargs -r docker stop

# Run the new container
docker run -d -p 80:80 $IMAGE
EOF

# Step 3: Create instance template using startup.sh
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    [
      'compute', 'instance-templates', 'create', 'web-template-$BUILD_ID',
      '--metadata-from-file', 'startup-script=startup.sh',
      '--machine-type=e2-micro',
      '--tags=http-server'
    ]

# Step 4: Create instance template using startup.sh
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Create-template
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      TEMPLATE_NAME="web-template-$${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"
      echo "Creating instance template: $$TEMPLATE_NAME using startup.sh"
      gcloud compute instance-templates create "$$TEMPLATE_NAME" \
        --machine-type=e2-small \
        --tags=http-server \
        --metadata=startup-script='#!/bin/bash
          cd /home/username/app
          git pull origin main
          bash startup.sh' \
        --quiet


# Step 5: Rolling update MIG
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Rolling-update
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      MIG_NAME=$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)
      TEMPLATE_NAME="web-template-$${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"
      echo "Starting rolling update on MIG: $$MIG_NAME with template $$TEMPLATE_NAME"
      gcloud compute instance-groups managed rolling-action start-update "$$MIG_NAME" \
        --version template="$$TEMPLATE_NAME" \
        --zone=us-central1-a \
        --minimal-action=replace \
        --max-surge=1 \
        --max-unavailable=1 \
        --type=proactive \
        --quiet



# Step 6: Wait for MIG rollout to complete
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Wait-for-rollout
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      MIG_NAME=$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)
      echo "Waiting for MIG $$MIG_NAME to finish rollout..."
      gcloud compute instance-groups managed wait-until-stable "$$MIG_NAME" \
        --zone=us-central1-a --timeout=900
      echo "MIG rollout complete âœ…"

## Step 7: Wait until backend is healthy
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Wait-for-backend
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      BACKEND="$${DEPLOY_ENV}-backend"
      echo "Waiting for backend $$BACKEND to become healthy..."
      until gcloud compute backend-services get-health "$$BACKEND" --global | grep -q "HEALTHY"; do
        echo "Backend not healthy yet, waiting 10s..."
        sleep 10
      done
      echo "Backend $$BACKEND healthy âœ…"

# ğŸ”¹ New step goes right here
# Step 7.5: Readiness buffer
# Step 7.5: Readiness buffer + warm-up
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Warm-up-instances
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      MIG_NAME=$$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)

      echo "Giving instances extra time to warm up..."
      sleep 120  # initial buffer

# Step 8: Switch traffic
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Switch-traffic
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      echo "Switching traffic to $$DEPLOY_ENV environment..."
      if [ "$$DEPLOY_ENV" == "green" ]; then
        bash ./switch-to-green.sh
      else
        bash ./switch-to-blue.sh
      fi
      echo "Traffic switched âœ…"
