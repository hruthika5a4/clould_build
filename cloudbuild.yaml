options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _ENV: "green"        # blue or green
  _VERSION: "v1"       # version tag

steps:
# Step 1: Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'build',
      '-t', 'us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${_ENV}-${_VERSION}-$BUILD_ID',
      '.'
    ]

# Step 2: Push Docker image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push',
      'us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${_ENV}-${_VERSION}-$BUILD_ID'
    ]

# Step 3: Create instance template
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      TEMPLATE_NAME="web-template-${_ENV}-${_VERSION}-$BUILD_ID"
      echo "Creating instance template: $TEMPLATE_NAME"
      gcloud beta compute instance-templates create-with-container $TEMPLATE_NAME \
        --machine-type=e2-small \
        --container-image=us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${_ENV}-${_VERSION}-$BUILD_ID \
        --tags=http-server \
        --quiet

# Step 4: Rolling update MIG
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      MIG_NAME="web-${_ENV}-mig"
      echo "Starting rolling update on MIG: $MIG_NAME"
      gcloud compute instance-groups managed rolling-action start-update $MIG_NAME \
        --version template=$TEMPLATE_NAME \
        --zone=us-central1-a \
        --max-surge=1 \
        --max-unavailable=1 \
        --type=proactive \
        --quiet

# Step 5: Wait for backend health
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      BACKEND="${_ENV}-backend"
      echo "Waiting for backend $BACKEND to become healthy..."
      while true; do
        HEALTHY=$(gcloud compute backend-services get-health $BACKEND --global \
          --format="value(healthStatus[].healthState)" | grep -c HEALTHY)
        if [ "$HEALTHY" -ge 1 ]; then
          echo "Backend $BACKEND is healthy âœ…"
          break
        fi
        echo "Backend not healthy yet, waiting 5s..."
        sleep 5
      done

# Step 6: Switch traffic safely
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Switching traffic to ${_ENV} environment..."
      if [ "${_ENV}" == "green" ]; then
        ./switch-to-green.sh
      else
        ./switch-to-blue.sh
      fi
