options:
  logging: CLOUD_LOGGING_ONLY

steps:
# Step 1: Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:$BUILD_ID', '.']

# Step 2: Push Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:$BUILD_ID']

# Step 3: Create instance template
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Creating instance template web-template-$BUILD_ID..."
      gcloud compute instance-templates create web-template-$BUILD_ID \
        --machine-type=e2-medium \
        --image-family=debian-11 \
        --image-project=debian-cloud \
        --metadata=startup-script='#!/bin/bash
          apt-get update
          apt-get install -y docker.io
          docker pull us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:$BUILD_ID
          docker run -d -p 80:80 us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:$BUILD_ID' \
        --quiet

# Step 4: Create or Update GREEN MIG
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      GREEN_MIG="web-green-mig"
      TEMPLATE="web-template-$BUILD_ID"
      ZONE="us-central1-a"
      HEALTH_CHECK="web-health-check"

      if ! gcloud compute instance-groups managed describe $GREEN_MIG --zone=$ZONE >/dev/null 2>&1; then
        echo "Creating Green MIG $GREEN_MIG..."
        gcloud compute instance-groups managed create $GREEN_MIG \
          --base-instance-name web-green \
          --size 2 \
          --template $TEMPLATE \
          --zone $ZONE \
          --health-check $HEALTH_CHECK \
          --initial-delay 60 \
          --quiet
      else
        echo "Updating Green MIG $GREEN_MIG..."
        gcloud compute instance-groups managed set-instance-template $GREEN_MIG \
          --template $TEMPLATE \
          --zone $ZONE
        gcloud compute instance-groups managed rolling-action start-update $GREEN_MIG \
          --version template=$TEMPLATE \
          --zone $ZONE
      fi

# Step 5: Wait until Green MIG is stable and healthy
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Waiting for Green MIG to become stable..."
      GREEN_MIG="web-green-mig"
      ZONE="us-central1-a"
      gcloud compute instance-groups managed wait-until-stable $GREEN_MIG --zone=$ZONE

# Step 6: Switch Load Balancer to GREEN MIG
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Switching Load Balancer to Green MIG..."
      LB_BACKEND="web-backend"
      GREEN_MIG="web-green-mig"
      ZONE="us-central1-a"

      gcloud compute backend-services update $LB_BACKEND \
        --global \
        --instance-group $GREEN_MIG \
        --instance-group-zone $ZONE \
        --quiet

# Step 7: Delete old BLUE MIG (optional)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      BLUE_MIG="web-blue-mig"
      ZONE="us-central1-a"
      echo "Deleting old Blue MIG if exists..."
      gcloud compute instance-groups managed delete $BLUE_MIG --zone=$ZONE --quiet || true

images:
- 'us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:$BUILD_ID'
