options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _VERSION: "v1"  # only allowed keys

steps:
# Step 1: Detect environment
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Detect-active-env
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e
      CURRENT_TARGET=$(gcloud compute forwarding-rules describe web-rule --global --format='value(target)')
      echo "Current target: $CURRENT_TARGET"

      if [[ "$CURRENT_TARGET" == *"blue"* ]]; then
        DEPLOY_ENV="green"
        MIG_NAME="web-green-mig"
      else
        DEPLOY_ENV="blue"
        MIG_NAME="web-1-mig"
      fi

      echo "Deploying to environment: $DEPLOY_ENV"
      echo "DEPLOY_ENV=$DEPLOY_ENV" > /workspace/deploy_env.txt
      echo "MIG_NAME=$MIG_NAME" >> /workspace/deploy_env.txt


# Step 2: Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: Build-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      IMAGE="us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"
      echo "Building Docker image: $IMAGE"
      docker build -t $IMAGE .

# Step 3: Push Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: Push-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      IMAGE="us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"
      echo "Pushing Docker image: $IMAGE"
      docker push $IMAGE

# Step 4: Create instance template using pushed Docker image
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Create-template
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      BUILD_VER="${_VERSION}-$BUILD_ID"
      IMAGE="us-central1-docker.pkg.dev/singular-object-464504-a3/artifact-repo/static-web:${DEPLOY_ENV}-${BUILD_VER}"
      TEMPLATE_NAME="web-template-$${DEPLOY_ENV}-${BUILD_VER}"

      echo "Creating instance template: $$TEMPLATE_NAME with image $$IMAGE"

      # Replace placeholders in startup.sh with the pushed image
      sed "s|__IMAGE__|$IMAGE|g" startup.sh > startup-final.sh

      gcloud compute instance-templates create "$$TEMPLATE_NAME" \
        --machine-type=e2-small \
        --tags=http-server \
        --image-family=cos-stable \
        --image-project=cos-cloud \
        --metadata-from-file startup-script=startup-final.sh \
        --quiet


# Step 5: Rolling update MIG
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Rolling-update
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      MIG_NAME=$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)
      TEMPLATE_NAME="web-template-${DEPLOY_ENV}-${_VERSION}-$BUILD_ID"

      echo "Starting rolling update on MIG: $MIG_NAME with template $TEMPLATE_NAME"

      gcloud compute instance-groups managed rolling-action start-update "$MIG_NAME" \
        --version template="$TEMPLATE_NAME" \
        --zone=us-central1-a \
        --minimal-action=replace \
        --max-surge=1 \
        --max-unavailable=1 \
        --type=proactive \
        --quiet

# Step 6: Wait for MIG rollout
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Wait-for-rollout
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      MIG_NAME=$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)
      echo "Waiting for MIG $MIG_NAME to finish rollout..."
      gcloud compute instance-groups managed wait-until-stable "$MIG_NAME" \
        --zone=us-central1-a --timeout=900
      echo "MIG rollout complete ✅"

# Step 7: Wait until backend healthy
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Wait-for-backend
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      BACKEND="${DEPLOY_ENV}-backend"
      echo "Waiting for backend $BACKEND to become healthy..."
      until gcloud compute backend-services get-health "$BACKEND" --global | grep -q "HEALTHY"; do
        echo "Backend not healthy yet, waiting 10s..."
        sleep 10
      done
      echo "Backend $BACKEND healthy ✅"

# Step 7.5: Warm-up buffer
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Warm-up-instances
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      MIG_NAME=$(grep MIG_NAME /workspace/deploy_env.txt | cut -d= -f2)
      echo "Giving instances extra time to warm up..."
      sleep 120

# Step 8: Switch traffic
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: Switch-traffic
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      DEPLOY_ENV=$(grep DEPLOY_ENV /workspace/deploy_env.txt | cut -d= -f2)
      echo "Switching traffic to $DEPLOY_ENV environment..."
      if [ "$DEPLOY_ENV" == "green" ]; then
        bash ./switch-to-green.sh
      else
        bash ./switch-to-blue.sh
      fi
      echo "Traffic switched ✅"
